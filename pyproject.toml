[project]
name = "youtrack-cli"
version = "0.13.3"
description = "YouTrack CLI - Command line interface for JetBrains YouTrack issue tracking system"
readme = "README.md"
requires-python = ">=3.9, <3.14"
license = { text = "MIT" }
authors = [
    { name = "Ryan Murphy", email = "ryan@example.com" },
]
keywords = ["youtrack", "cli", "issue-tracking", "jetbrains", "project-management"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Bug Tracking",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]
dependencies = [
    "rich>=13.0.0",
    "textual>=0.40.0",
    "pydantic>=2.0.0",
    "click>=8.0.0",
    "httpx>=0.24.0",
    "python-dotenv>=1.0.0",
    "pydantic-settings>=2.0.0",
    "tomli>=1.2.0; python_version<'3.11'",
    "structlog>=25.4.0",
    "keyring>=25.0.0",
    "cryptography>=41.0.0",
    "ty>=0.0.1a14",
    "docker>=7.0.0",
    "selenium>=4.34.2",
]

[project.urls]
Homepage = "https://github.com/ryan-murphy/yt-cli"
Documentation = "https://yt-cli.readthedocs.io/"
Repository = "https://github.com/ryan-murphy/yt-cli.git"
Issues = "https://github.com/ryan-murphy/yt-cli/issues"
Changelog = "https://github.com/ryan-murphy/yt-cli/blob/main/CHANGELOG.md"

[project.scripts]
yt = "youtrack_cli.main:main"


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["youtrack_cli"]

[tool.hatch.build.targets.wheel.force-include]
"youtrack_cli/py.typed" = "youtrack_cli/py.typed"

[tool.ruff]
target-version = "py39"
line-length = 120
extend-exclude = [
    "migrations",
    "build",
    "dist",
    ".venv",
    "venv",
    "__pycache__",
    ".git",
]

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade
    "Q",     # flake8-quotes
    # Temporarily disabled for gradual adoption:
    # "N",     # pep8-naming
    # "S",     # flake8-bandit (security)
    # "T20",   # flake8-print
    # "PT",    # flake8-pytest-style
    # "RET",   # flake8-return
    # "SIM",   # flake8-simplify
    # "TID",   # flake8-tidy-imports
    # "ARG",   # flake8-unused-arguments
    # "ERA",   # eradicate (commented-out code)
    # "PL",    # pylint
    # "TRY",   # tryceratops
    # "FURB",  # refurb
]
ignore = [
    # Python 3.9 compatibility
    "UP045",  # Use `X | None` for type annotations
    "UP007",  # Use `X | Y` for type annotations
    "UP006",  # Use `dict` instead of `Dict`
    "UP035",  # `typing.Dict` is deprecated

    # Security exceptions for CLI tools
    "S101",   # Use of assert (common in tests)
    "S603",   # subprocess call without shell=True
    "S607",   # Starting a process with a partial executable path

    # Style preferences
    "E501",   # Line too long (handled by formatter)
    "T201",   # print statements (allowed in CLI)
    "PLR0913", # Too many arguments (can be necessary)
    "PLR2004", # Magic value comparison

    # Security exceptions (additional)
    "S108",   # Probable insecure usage of temporary files
    "S110",   # try-except-pass detected
    "S112",   # try-except-continue detected

    # Code complexity (can be addressed gradually)
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "C901",   # Complex function
    "PLC0415", # Import outside top-level
    "ARG001", # Unused function argument
    "ARG002", # Unused method argument
    "TRY300", # Consider moving statement to else block
    "TRY400", # Use logging.exception instead of logging.error
    "RET504", # Unnecessary assignment before return
    "SIM102", # Use single if statement
    "SIM115", # Use context manager for opening files
    "PT003",  # scope='function' is implied in pytest.fixture

    # Temporary ignores (can be removed gradually)
    "N806",   # Variable in function should be lowercase
    "SIM108", # Use ternary operator
    "TRY003", # Avoid specifying long messages outside exception class
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",    # Use of assert (required in tests)
    "PLR2004", # Magic value comparison (common in tests)
    "ARG001",  # Unused function argument (fixtures)
    "S105",    # Hardcoded password (test data)
    "S106",    # Hardcoded password (test data)
]
"docs/*" = [
    "INP001",  # Missing __init__.py (not needed for docs)
]

[tool.ruff.lint.isort]
known-first-party = ["youtrack_cli"]
force-single-line = false
combine-as-imports = true
split-on-trailing-comma = true

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.ty]
# Type checking configuration for ty - using minimal config for now

[tool.pydocstyle]
convention = "google"
add_ignore = ["D100", "D104", "D105", "D107", "D403"]
match_dir = "youtrack_cli"
match = "(?!test_).*\\.py"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "--cov=youtrack_cli",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=50",
    "--maxfail=5",
    "--durations=10",
]
markers = [
    "integration: marks tests as integration tests (require real YouTrack API access)",
    "unit: marks tests as unit tests (fast, isolated, no external dependencies)",
    "doctest: marks tests as doctests (documentation code examples)",
    "slow: marks tests as slow (may take more than 1 second)",
    "network: marks tests that require network access",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::pytest.PytestUnraisableExceptionWarning",
    "ignore::UserWarning",
]
doctest_optionflags = ["NORMALIZE_WHITESPACE", "ELLIPSIS", "IGNORE_EXCEPTION_DETAIL"]

[tool.coverage.run]
source = ["youtrack_cli"]
omit = [
    "tests/*",
    "*/test_*",
    "youtrack_cli/__main__.py",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
]
branch = true
parallel = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
sort = "Cover"
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "except ImportError:",
]
fail_under = 60

[tool.coverage.html]
directory = "htmlcov"
show_contexts = true

[tool.coverage.xml]
output = "coverage.xml"

[dependency-groups]
dev = [
    "ty>=0.0.1a13",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
    "pytest-randomly>=3.0.0",
    "ruff>=0.12.1",
    "tox>=4.27.0",
    "zizmor>=1.11.0",
    "twine>=6.1.0",
    "pre-commit>=3.0.0",
    "pydocstyle>=6.3.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autobuild>=2021.3.14",
    "sphinx-autodoc-typehints>=1.24.0",
    "sphinx-click>=5.0.0",
]
