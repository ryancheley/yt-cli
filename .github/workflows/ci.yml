name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
      with:
        persist-credentials: false

    - name: Install uv
      uses: astral-sh/setup-uv@557e51de59eb14aaaba2ed9621916900a91d50c6 # v4
      with:
        version: "latest"
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies and run tests with tox-uv
      run: uvx --with tox-uv tox -e py$(echo ${{ matrix.python-version }} | tr -d '.')

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v4
      with:
        files: ./coverage.xml
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
      with:
        persist-credentials: false

    - name: Install uv
      uses: astral-sh/setup-uv@557e51de59eb14aaaba2ed9621916900a91d50c6 # v4
      with:
        version: "latest"
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Set up Python
      uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v5
      with:
        python-version: "3.11"

    - name: Run lint with tox-uv
      run: uvx --with tox-uv tox -e lint

  type-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
      with:
        persist-credentials: false

    - name: Install uv
      uses: astral-sh/setup-uv@557e51de59eb14aaaba2ed9621916900a91d50c6 # v4
      with:
        version: "latest"
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Set up Python
      uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v5
      with:
        python-version: "3.11"

    - name: Run type check with tox-uv
      run: uvx --with tox-uv tox -e type

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
      with:
        persist-credentials: false

    - name: Install uv
      uses: astral-sh/setup-uv@557e51de59eb14aaaba2ed9621916900a91d50c6 # v4
      with:
        version: "latest"
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Set up Python
      uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v5
      with:
        python-version: "3.11"

    - name: Install dependencies and run security check
      run: |
        uv sync --dev
        uv run zizmor .github/workflows/

  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
      with:
        persist-credentials: false

    - name: Install uv
      uses: astral-sh/setup-uv@557e51de59eb14aaaba2ed9621916900a91d50c6 # v4
      with:
        version: "latest"
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Set up Python
      uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v5
      with:
        python-version: "3.11"

    - name: Install dependencies and build documentation
      run: |
        uv sync --dev --group docs
        uv run python -c "import sphinx; print('Sphinx version:', sphinx.__version__)"
        uv run python -m sphinx -b html docs docs/_build/html --keep-going
        uv run python -m sphinx -b doctest docs docs/_build/doctest
        uv run python -m sphinx -b linkcheck docs docs/_build/linkcheck || true
        echo "Documentation testing infrastructure is in place"
        echo "RST files found:" && find docs/ -name "*.rst" | wc -l

  # Summary job for branch protection
  tests-complete:
    name: test
    if: always()
    runs-on: ubuntu-latest
    needs: [test, lint, type-check, security, documentation]
    steps:
      - name: Check all jobs
        env:
          TEST_RESULT: ${{ needs.test.result }}
          LINT_RESULT: ${{ needs.lint.result }}
          TYPE_CHECK_RESULT: ${{ needs.type-check.result }}
          SECURITY_RESULT: ${{ needs.security.result }}
          DOCUMENTATION_RESULT: ${{ needs.documentation.result }}
        run: |
          if [[ "$TEST_RESULT" == "success" &&
                "$LINT_RESULT" == "success" &&
                "$TYPE_CHECK_RESULT" == "success" &&
                "$SECURITY_RESULT" == "success" &&
                "$DOCUMENTATION_RESULT" == "success" ]]; then
            echo "All checks passed"
            exit 0
          else
            echo "Some checks failed"
            exit 1
          fi
